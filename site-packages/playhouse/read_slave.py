"""
Support for using a dedicated read-subordinate. The read database is specified as a
Model.Meta option, and will be used for SELECT statements:


main = PostgresqlDatabase('main')
read_subordinate = PostgresqlDatabase('read_subordinate')

class BaseModel(ReadSubordinateModel):
    class Meta:
        database = main
        read_subordinates = [read_subordinate]  # This database will be used for SELECTs.


# Now define your models as you would normally.
class User(BaseModel):
    username = CharField()

# To force a SELECT on the main database, you can instantiate the SelectQuery
# by hand:
main_select = SelectQuery(User).where(...)
"""
from peewee import *


class ReadSubordinateModel(Model):
    @classmethod
    def _get_read_database(cls):
        if not getattr(cls._meta, 'read_subordinates', None):
            return cls._meta.database
        current_idx = getattr(cls, '_read_subordinate_idx', -1)
        cls._read_subordinate_idx = (current_idx + 1) % len(cls._meta.read_subordinates)
        return cls._meta.read_subordinates[cls._read_subordinate_idx]

    @classmethod
    def select(cls, *args, **kwargs):
        query = super(ReadSubordinateModel, cls).select(*args, **kwargs)
        query.database = cls._get_read_database()
        return query

    @classmethod
    def raw(cls, *args, **kwargs):
        query = super(ReadSubordinateModel, cls).raw(*args, **kwargs)
        if query._sql.lower().startswith('select'):
            query.database = cls._get_read_database()
        return query
